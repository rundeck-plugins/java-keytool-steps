#!/usr/bin/env bash
set -eu

usage() {
	printf "Usage: --action <%s> [--jdk-home <>] [--keystore-path <>] [--cert-path <>]\n" "$*"
}

options_parse() {
	unrecognized_args=()

    while (( "$#" > 0 ))
    do
        OPT="$1"
        case "$OPT" in
        	--action)        		action=$2        		; shift 2 ;;
            --jdk-home)      		jdk_home=$2      		; shift 2 ;;
            --keystore-path)		keystore_path=$2 		; shift 2 ;;
            --cert-path)     		cert_path=$2     		; shift 2 ;;
			--age-thresh)			age_thresh=$2    		; shift 2 ;;
			--overwrite-keystore)   overwrite_keystore=$2	; shift 2 ;;
            # help option
            -\?|--help)
                usage
                exit 2
                ;;
            # unrecognized arguments
            *)
              unrecognized_args+=("$OPT")
              shift
              ;;
        esac
    done

    # Set defaultable options.

    # Check required options are set
	if [[ "${actions[*]}" =~ ${action} ]]
	then
		:
	else
		printf "Action unrecoginized '%s'\n" "$action"
		return 2
	fi
    return 0
}

check_keytool() {
	# If it's executable, use the keytool for the specified JDK
	#  otherwise, use what's in the $PATH
	local jdk=$1 keytool=''

	if [[ -x "$jdk/jre/bin/keytool" ]]
	then 
		keytool=$jdk/jre/bin/keytool
	else
		# Check the $PATH for it.
		if ! keytool=$(type -p keytool)
		then 
			:
		fi
	fi
	if [[ -z "${keytool:-}" ]]; then
		printf "ERROR: keytool executable not found."
		return 1
	fi
	printf "%s" "$keytool"
	return 0
}

# Check which certificates are in a Java keystore
action:list() {
	# Build the arguments list
	local keystore=$1 alias=$2 password=$3
	local clopts=( -list -v -keystore "$keystore")
	[[ -n "$alias" ]] && clopts+=( -alias "$alias")
	[[ -n "$password" ]] && clopts+=( -storepass "$password")

	# Run it.
	command "$keytool" "${clopts[@]}"
}

action:printcert() {
	# Run the printcert action
	local cert_file=$1
	command "$keytool" -printcert -v -file "$cert_file"
}

action:checkExp() {
	# Build the arguments list
	local keystore=$1 alias=$2 password=$3 ageThresh=$4
	local keytoolOut='' expDateString='' dateTrim='' expDate
	local dateYYYY='' dateMM='' dateDD='' dateDDTemp='' dateMon='' i=0 secondsDiff=0 daysDiff=0
	local months=( JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC )
	local clopts=( -list -v -keystore "$keystore")
	[[ -n "$alias" ]] && clopts+=( -alias "$alias")
	[[ -n "$password" ]] && clopts+=( -storepass "$password")

	# Run and print it.
	keytoolOut=$(command "$keytool" "${clopts[@]}") || { printf "%s\n" "$keytoolOut"; exit 1; }
	expDateString=$(printf "%s" "$keytoolOut" | awk -Funtil: '/until:/ {print $2;exit;}')
	echo "$alias expires on:$expDateString"

	# Strip leading spaces and capture date. Different versions of java display the 'until' date differently
	dateTrim=$(echo "$expDateString" | awk '{print $1}')

	if [[ $dateTrim =~ ^[0-9] ]]
	then
		# Date was provided in number format (java8+)
		dateMM=$( printf %02d "$(echo "$dateTrim" | awk -F/ '{print $1}')" )
		dateDD=$( printf %02d "$(echo "$dateTrim" | awk -F/ '{print $2}')" )
		dateYYYY=$(echo "$dateTrim" | awk -F/ '{print "20"$3}')

		expDate=$dateYYYY-$dateMM-$dateDD
	else
		# Date was provided in word format (<java8). Convert to numeric
		dateMon=$( echo "$expDateString" | awk '{print $2}' | tr '[:lower:]' '[:upper:]' )

		for (( i=0; i<11; i++ )); do
			[[ $dateMon = "${months[i]}" ]] && break;
		done

		dateMM=$( printf %02d $((i+1)) ) 
		dateDDTemp="$(echo "$expDateString" | awk '{print $3}')"
		dateDD=$( printf %02d "$(echo "${dateDDTemp#0}")" ) #strip leading zeroes before feeding to printf
		dateYYYY=$( echo "$expDateString" | awk '{print $6}' )

		expDate=$dateYYYY-$dateMM-$dateDD
	fi
	
	# How many days between today and $expDate?
	secondsDiff=$(( $(date -d "$expDate" +%s) - $(date +%s) ))
	daysDiff=$( echo $secondsDiff/86400 | bc )
	printf "%s\n" "Your certificate expires in $daysDiff days."

	if [[ -n "$ageThresh" ]]
	then
		# check against specified threshhold and fail if necessary
		if [[ "$daysDiff" -le "$ageThresh" ]]
		then
			printf "%s\n" "It's time to renew your certficate for $alias!" 1>&2
			exit 3
		else
			:
		fi
	else
		:
	fi
}

action:create() {
	# Build the arguments list
	local keytoolOut='' dname=''
	local keystore=$1 alias=$2 storePass=$3 keyPass=$4 keyAlg=$5 keySize=$6 cn=$7 ou=$8 org=$9 
	local loc=${10} state=${11} country=${12} validPd=${13} san=${14} overwrite=${15} certreqDir=${16} keyUsage=${17}

	dname=$( printf "%s" \"CN="$cn", OU="$ou", O="$org", L="$loc", S="$state", C="$country"\" )

	local clopts=( -genkeypair -noprompt -alias "$alias" -keyalg "$keyAlg" -keysize "$keySize" -keystore "$keystore" -dname "$dname" )
	clopts+=( -validity "$validPd" -storepass \""$storePass"\" -keypass \""$keyPass"\" )
	[[ -n "$san" ]] && clopts+=( -ext "san=$san" )
	[[ -n "$keyUsage" ]] && clopts+=( -ext "KeyUsage=$keyUsage" )

	# Delete the keystore if it already exists and user checked override flag
	if [[ -e "$keystore" ]] && [[ "$overwrite" = "true" ]]
	then
		printf "%s\n" "The keystore $keystore already exists. Deleting."
		rm -f "$keystore" || { printf "%s\n" "Error deleting keystore." 1>&2; exit 1; }
	else
		:
	fi

	# Create keystore
	printf "%s\n" "Creating new keystore: $keystore"
	keytoolOut=$(eval "$keytool" "${clopts[@]}") || { printf "%s\n" "$keytoolOut"; exit 1; }

	# If specified, generate a certificate request
	if [[ -n "$certreqDir" ]]
	then
		printf "%s\n" "Generating Certificate Request:"
		[[ -w "$certreqDir" ]] || { printf "%s\n" "Path $certreqDir doesn't exist or is not writeable." 1>&2; exit 1; }
		clopts=( -certreq -noprompt -alias "$alias" -keystore "$keystore" -file "$certreqDir"/certreq.csr -storepass \""$storePass"\" -keypass \""$keyPass"\" )
		[[ -n "$san" ]] && clopts+=( -ext "san=$san" )
		[[ -n "$keyUsage" ]] && clopts+=( -ext "KeyUsage=$keyUsage" )

		keytoolOut=$(eval "$keytool" "${clopts[@]}") || { printf "%s\n" "$keytoolOut"; exit 1; }

		cat "$certreqDir"/certreq.csr
	else
		:
	fi
}

action:import() {
	# Import an alias into a keystore
	local keystore=$1 storePass=$2 keyPass=$3 alias=$4 cert_file=$5 
	local clopts=( -import -noprompt -trustcacerts -alias "$alias" -file "$cert_file" -keystore "$keystore" -storepass "$storePass" -keypass "$keyPass" )

	printf "%s\n" "Importing alias $alias..."
	command "$keytool" "${clopts[@]}"
}

action:delete() {
	# Delete an alias from a keystore
	local keytoolOut=''
	local keystore=$1 alias=$2 storePass=$3

	printf "%s\n" "Deleting alias $alias if it already exists..."
	keytoolOut=$(command "$keytool" -delete -noprompt -alias "$alias" -keystore "$keystore" -storepass "$storePass") || { 
		printf "%s\n" "keytoolOut=$keytoolOut"
		if grep -q 'Alias .* does not exist' <<< "$keytoolOut"
		then
			# Acceptable, do not fail.
			printf "%s" "Alias does not exist. Nothing to delete."
		else
			# Something else went wrong. Fail.
			printf "%s" "$keytoolOut"
			exit 1
		fi
	}

}
#Begin script execution

declare -r actions=(list printcert checkExp create import delete)
declare -r keystore_password="${RD_CONFIG_KEYSTORE_PASSWORD:-}"
declare -r private_key_password="${RD_CONFIG_PRIVATE_KEY_PASSWORD:-}"

if ! options_parse "$@"
then
	usage "${actions[@]}"
	exit 2
fi

keytool=$(check_keytool "$jdk_home")

case "$action" in	
	list) 
		action:list "$keystore_path" "${RD_CONFIG_ALIAS:-}" "$keystore_password"
	;;
	printcert) 
		action:printcert "$cert_path"
	;;	
	checkExp)
		action:checkExp "$keystore_path" "${RD_CONFIG_ALIAS:-}" "$keystore_password" "$age_thresh"
	;;
	create)
		action:create "$keystore_path" "${RD_CONFIG_ALIAS:-}" "$keystore_password" "$private_key_password" "${RD_CONFIG_KEY_ALG:-}" "${RD_CONFIG_KEY_SIZE:-}" "${RD_CONFIG_COMMON_NAME:-}" "${RD_CONFIG_ORG_UNIT:-}" "${RD_CONFIG_ORG_NAME:-}" "${RD_CONFIG_LOC_NAME:-}" "${RD_CONFIG_STATE_NAME:-}" "${RD_CONFIG_COUNTRY:-}" "${RD_CONFIG_VALIDITY_PERIOD:-}" "${RD_CONFIG_SAN:-}" "$overwrite_keystore" "${RD_CONFIG_CERTREQ_PATH:-}" "${RD_CONFIG_KEY_USAGE:-}"
	;;
	import) 
		action:import "$keystore_path" "$keystore_password" "$private_key_password" "${RD_CONFIG_ALIAS:-}" "$cert_path" 
	;;
	delete)
		action:delete "$keystore_path" "${RD_CONFIG_ALIAS:-}" "$keystore_password"
	;;
	*) usage
	;;
esac

exit $?
